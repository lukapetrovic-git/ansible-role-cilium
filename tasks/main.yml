---
- block:
    - name: determine latest cilium cli version
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt
        return_content: true
      register: cilium_latest_version

    - name: set cilium desired version variable
      ansible.builtin.set_fact:
        cilium_cli_version: "{{ cilium_latest_version.content | trim }}"
  when: cilium_cli_version is not defined or cilium_cli_version == None

- name: check if cilium cli binary exists
  ansible.builtin.stat:
    path: "{{ cilium_cli_bin_path }}"
  register: cilium_check

- name: check cilium cli version
  ansible.builtin.shell:
    cmd: "{{ cilium_cli_bin_path }} version | grep cilium-cli:"
  environment:
    KUBECONFIG: "{{ cilium_kubeconfig_path }}"
  failed_when: false
  changed_when: false
  register: cilium_cli_existing_version

- block:
    - name: set cilium cli architecture var
      ansible.builtin.set_fact:
        cilium_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

    - name: download cilium cli
      ansible.builtin.unarchive:
        src: "https://github.com/cilium/cilium-cli/releases/download/{{ cilium_cli_version }}/cilium-linux-{{ cilium_arch }}.tar.gz"
        dest: /tmp
        remote_src: true
        mode: 0755

    - name: copy cilium binary into place.
      ansible.builtin.copy:
        src: "/tmp/cilium"
        dest: "{{ cilium_cli_bin_path }}"
        mode: 0755
        remote_src: true
      become: true
  when: cilium_check.stat.exists == false or cilium_cli_version not in cilium_cli_existing_version.stdout

- name: create cilium config
  ansible.builtin.template:
    src: "cilium-config.j2"
    dest: "{{ cilium_config_file_path }}"
    mode: '0600'
  register: cilium_config

- name: check cilium version
  ansible.builtin.shell:
    cmd: "{{ cilium_cli_bin_path }} version | grep 'cilium image (running):'"
  environment:
    KUBECONFIG: "{{ cilium_kubeconfig_path }}"
  failed_when: false
  changed_when: false
  register: cilium_running_version

- name: install cilium
  ansible.builtin.shell:
    cmd: "{{ cilium_cli_bin_path }} install --version {{ cilium_version }} -f {{ cilium_config_file_path }}"
  environment:
    KUBECONFIG: "{{ cilium_kubeconfig_path }}"
  register: cilium_install
  when: '"Unable to obtain cilium version" in cilium_running_version.stdout'

- name: upgrade/downgrade cilium or change cilium config
  ansible.builtin.shell:
    cmd: "{{ cilium_cli_bin_path }} upgrade --version {{ cilium_version }} -f {{ cilium_config_file_path }}"
  environment:
    KUBECONFIG: "{{ cilium_kubeconfig_path }}"
  register: cilium_upgrade
  when:
  - cilium_version not in cilium_running_version.stdout or cilium_config.changed
  - cilium_install.changed == false

- name: restart cilium
  ansible.builtin.shell: |
    {{ cilium_kubectl_bin_path }} --kubeconfig {{ cilium_kubeconfig_path }} -n kube-system rollout restart deployment/cilium-operator
    {{ cilium_kubectl_bin_path }} --kubeconfig {{ cilium_kubeconfig_path }} -n kube-system rollout restart daemonset/cilium
  register: cilium_restart
  when:
  - cilium_config.changed
  - cilium_install.changed == false
  - cilium_restart_on_config_change | bool

- name: wait for cilium to be running and ready
  ansible.builtin.shell:
    cmd: "{{ cilium_cli_bin_path }} status --wait --wait-duration 10m"
  environment:
    KUBECONFIG: "{{ cilium_kubeconfig_path }}"
  when: cilium_install.changed or cilium_upgrade.changed

- name: install hubble cli
  ansible.builtin.include_tasks:
    file: tasks/hubble_cli.yml
  when: cilium_install_hubble_cli | bool
